name: read-list
run-name: Read List

env:
  AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
  AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
  AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
  AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}

on:
  - push

concurrency: merge-${{ github.ref }}
    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read

jobs:
  # initiating:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     frontend: ${{ steps.filter.outputs.frontend }}
  #     backend: ${{ steps.filter.outputs.backend }}
  #     infraStack: ${{ steps.filter.outputs.infraStack }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
  #     - uses: dorny/paths-filter@v2
  #       id: filter
  #       with:
  #         filters: |
  #           backend:
  #             - 'packages/**'
  #           frontend:
  #             - 'frontend/**'
  #           infraStack:
  #             - 'stacks/**'

  test-front-end:
    runs-on: ubuntu-latest
    env:
        APP_ENV: ${{ inputs.APP_ENV }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
            version: latest
            run_install: false
    
      - name: Get pnpm store directory
        shell: bash
        run: |
            echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
            path: ${{ env.STORE_PATH }}
            key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
            restore-keys: |
                ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: run tests
        run: |
            cd frontend
            pnpm run test:coverage
      - run: echo "üçè This job's status is ${{ job.status }} for $APP_ENV."

  test-api:
    runs-on: ubuntu-latest
    env:
      APP_ENV: ${{ inputs.APP_ENV }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
  
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: latest
          run_install: false
        
      - name: Get pnpm store directory
        shell: bash
        run: |
            echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: run tests
        run: |
          cd packages/functions
          pnpm run test
      - run: echo "üçè This job's status is ${{ job.status }} for $APP_ENV."

  deploy-app:
    needs: [test-api, test-front-end]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      APP_ENV: ${{ inputs.APP_ENV }}
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
  
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: latest
          run_install: false
        
      - name: Get pnpm store directory
        shell: bash
        run: |
            echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::724538604969:role/Github
          aws-region: ap-southeast-2

      - name: Deploy app
        run: |
          echo "$APP_ENV environment"
          pnpm types --stage staging
          pnpm run deploy --stage staging
      - run: echo "üçè This job's status is ${{ job.status }}."

  deploy-app-prod:
    needs: [test-api, test-front-end]
    if: github.ref == 'refs/heads/main && startsWith(github.ref, "refs/tags/v")'
    runs-on: ubuntu-latest
    env:
      APP_ENV: ${{ inputs.APP_ENV }}
      AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
      AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
      AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
      AUTH0_AUDIENCE: ${{ secrets.AUTH0_AUDIENCE }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
  
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: latest
          run_install: false
        
      - name: Get pnpm store directory
        shell: bash
        run: |
            echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
  
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
              ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::724538604969:role/Github
          aws-region: ap-southeast-2

      - name: Deploy app
        run: |
          echo "$APP_ENV environment"
          pnpm types --stage production
          pnpm run deploy --stage production
      - run: echo "üçè This job's status is ${{ job.status }}."